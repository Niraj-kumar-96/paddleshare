/**
 * @fileoverview Firestore Security Rules for PaddleShare.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and associated data (vehicles, bookings).
 * Rides and Reviews are publicly readable, but writes are restricted to authenticated users, with ownership enforced where applicable.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only to the owning user.
 * - /rides/{rideId}: Publicly readable ride listings, created and managed by authenticated users.
 * - /bookings/{bookingId}: Bookings made by users for specific rides.
 * - /reviews/{reviewId}: Reviews for rides, created by authenticated users.
 * - /vehicles/{vehicleId}: Vehicle information, owned by a user.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Anyone can list and get rides, but only authenticated users can create, update, or delete them.
 * - Bookings are restricted to the user who created them.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * - Rides include a `driverId` field to easily verify the ride creator.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read/write their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create, update, delete, get, list) - User with matching UID.
     *   Example: request.auth.uid == 'user123' AND resource.id == 'user123'
     * @deny (create, update, delete, get, list) - Any other user.
     *   Example: request.auth.uid == 'user456' AND resource.id == 'user123'
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disable listing all users

      // Allow create only if the authenticated user's ID matches the userId in the path
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // On Update: Ensure the user is the owner and the user ID cannot be changed.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure ride listings. Anyone can read rides, but only authenticated users can create, update, or delete them.
     * @path /databases/{database}/documents/rides/{rideId}
     * @allow (get, list) - Anyone.
     *   Example: Any user, authenticated or not, can view the ride.
     * @allow (create) - Authenticated user creating a ride with their driverId.
     *   Example: request.auth.uid == 'user123' AND request.resource.data.driverId == 'user123'
     * @allow (update, delete) - Ride creator updating/deleting their own ride.
     *   Example: request.auth.uid == 'user123' AND resource.data.driverId == 'user123'
     * @deny (create) - Unauthenticated user creating a ride.
     *   Example: request.auth.uid == null
     * @deny (update, delete) - Any other user updating/deleting the ride.
     *   Example: request.auth.uid == 'user456' AND resource.data.driverId == 'user123'
     * @principle Public read access with owner-only writes, relational integrity on create.
     */
    match /rides/{rideId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(driverId) {
        return request.auth.uid == driverId;
      }

      function isExistingOwner(driverId) {
          return isOwner(driverId) && resource != null;
      }

      allow get, list: if true;

      // Only allow create if the user is signed in and the driverId matches the authenticated user's UID.
      allow create: if isSignedIn() && isOwner(request.resource.data.driverId);

      // Only the owner (driver) can update/delete the ride, and only if the ride exists.
      allow update: if isExistingOwner(resource.data.driverId);
      allow delete: if isExistingOwner(resource.data.driverId);
    }

    /**
     * @description Secure bookings. Authenticated users can create/read their own bookings.
     * @path /databases/{database}/documents/bookings/{bookingId}
     * @allow (create) - Authenticated user creating a booking with their passengerId.
     *   Example: request.auth.uid == 'user123' AND request.resource.data.passengerId == 'user123'
     * @allow (get, list) - Booking owner reading their own booking.
     *   Example: request.auth.uid == 'user123' AND resource.data.passengerId == 'user123'
     * @allow (update, delete) - Booking owner updating/deleting their own booking.
     *   Example: request.auth.uid == 'user123' AND resource.data.passengerId == 'user123'
     * @deny (create) - Unauthenticated user creating a booking.
     *   Example: request.auth.uid == null
     * @deny (get, list, update, delete) - Any other user accessing the booking.
     *   Example: request.auth.uid == 'user456' AND resource.data.passengerId == 'user123'
     * @principle Enforces document ownership for all operations.
     */
    match /bookings/{bookingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(passengerId) {
        return request.auth.uid == passengerId;
      }

       function isExistingOwner(passengerId) {
          return isOwner(passengerId) && resource != null;
      }

      // Only allow create if the user is signed in and the passengerId matches the authenticated user's UID.
      allow create: if isSignedIn() && isOwner(request.resource.data.passengerId);

      allow get: if isOwner(resource.data.passengerId);
      allow list: if isOwner(request.auth.uid); // Allow listing only the bookings of the current user

      // Only the owner (passenger) can update/delete the booking, and only if the booking exists.
      allow update: if isExistingOwner(resource.data.passengerId);
      allow delete: if isExistingOwner(resource.data.passengerId);
    }

    /**
     * @description Secure reviews. Authenticated users can create reviews. Anyone can read them.
     * @path /databases/{database}/documents/reviews/{reviewId}
     * @allow (get, list) - Anyone.
     *   Example: Any user, authenticated or not, can view the review.
     * @allow (create) - Authenticated user creating a review with their reviewerId.
     *   Example: request.auth.uid == 'user123' AND request.resource.data.reviewerId == 'user123'
     * @deny (create) - Unauthenticated user creating a review.
     *   Example: request.auth.uid == null
     * @deny (update, delete) - No one can update or delete a review.
     * @principle Public read access, authenticated-user-only creation, no updates or deletes.
     */
    match /reviews/{reviewId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(reviewerId) {
        return request.auth.uid == reviewerId;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.reviewerId);
      allow update, delete: if false;
    }

    /**
     * @description Secure vehicle information. Only the vehicle owner can read/write their vehicles.
     * @path /databases/{database}/documents/vehicles/{vehicleId}
     * @allow (create) - Authenticated user creating a vehicle with their driverId.
     *   Example: request.auth.uid == 'user123' AND request.resource.data.driverId == 'user123'
     * @allow (get, list) - Vehicle owner reading their own vehicles.
     *   Example: request.auth.uid == 'user123' AND resource.data.driverId == 'user123'
     * @allow (update, delete) - Vehicle owner updating/deleting their own vehicle.
     *   Example: request.auth.uid == 'user123' AND resource.data.driverId == 'user123'
     * @deny (create) - Unauthenticated user creating a vehicle.
     *   Example: request.auth.uid == null
     * @deny (get, list, update, delete) - Any other user accessing the vehicle.
     *   Example: request.auth.uid == 'user456' AND resource.data.driverId == 'user123'
     * @principle Enforces document ownership for all operations.
     */
    match /vehicles/{vehicleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(driverId) {
        return request.auth.uid == driverId;
      }

       function isExistingOwner(driverId) {
          return isOwner(driverId) && resource != null;
      }

      // Only allow create if the user is signed in and the driverId matches the authenticated user's UID.
      allow create: if isSignedIn() && isOwner(request.resource.data.driverId);

      allow get: if isOwner(resource.data.driverId);
      allow list: if isOwner(request.auth.uid); // Allow listing only the vehicles of the current user

      // Only the owner (driver) can update/delete the vehicle, and only if the vehicle exists.
      allow update: if isExistingOwner(resource.data.driverId);
      allow delete: if isExistingOwner(resource.data.driverId);
    }
  }
}