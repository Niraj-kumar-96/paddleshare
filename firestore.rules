/**
 * @file Firestore Security Rules for PaddleShare
 * @description This ruleset enforces a user-centric security model for the PaddleShare application.
 *
 * Core Philosophy:
 *  - Authenticated users have broad access to create and read data, with ownership enforced for updates and deletions.
 *  - Unauthenticated users can read some data but cannot create, update, or delete any data.
 *  - Data consistency is enforced where necessary, especially concerning user IDs and relationships.
 *
 * Data Structure:
 *  - Users: Stored in the `/users/{userId}` collection, where `{userId}` matches the Firebase Authentication UID.
 *  - Rides: Stored in the `/rides` collection, readable by all, but writable only by authenticated users, with the `driverId` field defining ownership.
 *  - Bookings: Stored in the `/bookings` collection. Users can create bookings for rides, and only the passenger and driver involved in the booking can access associated messages in the `/bookings/{bookingId}/messages` subcollection.
 *  - Reviews: Stored in the `/reviews` collection.
 *  - Vehicles: Stored in the `/vehicles` collection, associated with a driver.
 *
 * Key Security Decisions:
 *  - User listing is disallowed.
 *  - Public read access is granted for the `/rides` collection to facilitate discovery.
 *
 * Denormalization for Authorization:
 *  - Ride documents contain a `driverId` field, enabling direct ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines helper function to check if the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Verifies user authentication status.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a helper function to check if the authenticated user's UID matches the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user ownership based on UID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines a helper function to check if the authenticated user's UID matches the existing resource ownerId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user ownership based on UID and verifies that the document exists.
     */
    function isExistingOwner(ownerId) {
      return isSignedIn() && isOwner(ownerId) && resource != null;
    }

    /**
     * @description Enforces user-specific data storage for profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' creates their profile at /users/user_abc.
     * @deny (create) User with UID 'user_abc' attempts to create a profile for 'user_xyz' at /users/user_xyz.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages ride postings, allowing public read access but restricting write access to authenticated users.
     * @path /rides/{rideId}
     * @allow (get, list) Anyone can read ride details.
     * @allow (create) Authenticated user creates a new ride with their UID as the driverId.
     * @deny (update, delete) Unauthorized user attempts to modify or delete a ride.
     * @principle Enforces document ownership for writes.
     */
    match /rides/{rideId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.driverId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.driverId);
      allow delete: if isExistingOwner(resource.data.driverId);
    }

    /**
     * @description Controls booking creations and access. Users can create their own bookings.
     * @path /bookings/{bookingId}
     * @allow (create) Authenticated user creates a booking.
     * @allow (get) Authenticated user retrieves their own booking.
     * @deny (update, delete) Unauthorized user attempts to modify or delete a booking.
     * @principle Enforces document ownership for writes.
     */
    match /bookings/{bookingId} {
      allow get: if isSignedIn() && (resource.data.passengerId == request.auth.uid || resource.data.rideId in get(/databases/$(database)/documents/rides/$(resource.data.rideId)).data.driverId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.passengerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.passengerId);
      allow delete: if isExistingOwner(resource.data.passengerId);

      /**
       * @description Manages chat messages within a booking, restricting access to the passenger and driver.
       * @path /bookings/{bookingId}/messages/{messageId}
       * @allow (create, get, list) Only the passenger or driver can create, read, or list messages.
       * @deny (update, delete) Unauthorized user attempts to modify or delete a message.
       * @principle Restricts access to collaborators.
       */
      match /messages/{messageId} {
        allow get, list: if isSignedIn() && (resource.data.senderId == request.auth.uid || get(/databases/$(database)/documents/bookings/$(bookingId)).data.rideId in get(/databases/$(database)/documents/rides/$(get(/databases/$(database)/documents/bookings/$(bookingId)).data.rideId)).data.driverId);
        allow create: if isSignedIn() && (request.resource.data.senderId == request.auth.uid || get(/databases/$(database)/documents/bookings/$(bookingId)).data.rideId in get(/databases/$(database)/documents/rides/$(get(/databases/$(database)/documents/bookings/$(bookingId)).data.rideId)).data.driverId);
        allow update: if false;
        allow delete: if false;
      }
    }

    /**
     * @description Manages ride reviews, allowing authenticated users to create reviews.
     * @path /reviews/{reviewId}
     * @allow (create) Authenticated user creates a new review.
     * @deny (get, list, update, delete) No specific restrictions defined in the prompt.
     * @principle Authenticated users can create reviews
     */
    match /reviews/{reviewId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages vehicle information, restricting access to the owner.
     * @path /vehicles/{vehicleId}
     * @allow (create) Authenticated user creates a new vehicle with their UID as the driverId.
     * @deny (get, list, update, delete) Unauthorized user attempts to access vehicle.
     * @principle Enforces document ownership for writes.
     */
    match /vehicles/{vehicleId} {
      allow get: if isOwner(resource.data.driverId);
      allow list: if isOwner(resource.data.driverId);
      allow create: if isSignedIn() && request.resource.data.driverId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.driverId);
      allow delete: if isExistingOwner(resource.data.driverId);
    }
  }
}