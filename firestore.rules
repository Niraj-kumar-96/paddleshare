/**
 * @fileoverview Firestore Security Rules for PaddleShare.
 *
 * Core Philosophy:
 * This ruleset prioritizes authorization independence and clarity. It uses structural segregation
 * and strategic denormalization to minimize `get()` calls and enable atomic operations.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the owner.
 * - /rides/{rideId}: Stores ride information.  Allows listing of all rides without security rule filtering.
 * - /rides/{rideId}/bookings/{bookingId}: Stores booking information for a specific ride. Access is restricted to the passenger.
 * - /rides/{rideId}/reviews/{reviewId}: Stores reviews for a specific ride. Access is restricted to the reviewer.
 * - /users/{userId}/vehicles/{vehicleId}: Stores vehicle information for a specific user. Access is restricted to the owner.
 *
 * Key Security Decisions:
 * - Rides are publicly listable to facilitate discovery.
 * - Data stored under `/users/{userId}` is strictly owner-only.
 * - Listing of Bookings, Reviews, and Vehicles is restricted to the owner.
 * - Anonymous users are supported for offering rides.
 *
 * Denormalization for Authorization:
 * - Rides include a `driverId` field to easily identify the ride creator, supporting both authenticated and anonymous users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile information. Only the user can read and write their own data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete their profile.
     * @deny (create, get, update, delete) - Any other user cannot access this data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Secures ride information.  Rides are publicly listable.
     * @path /rides/{rideId}
     * @allow (get, list) - Any user can get and list rides.
     * @allow (create) - Any authenticated user can create rides, ensuring that request.resource.data.driverId == request.auth.uid.  Anonymous users can create rides too.
     * @allow (update, delete) - Only the user who created the ride can update or delete it.
     * @deny (create, update, delete) - Other users cannot create, update, or delete rides.
     * @principle Allows public read access but restricts writes to the owner.
     */
    match /rides/{rideId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(driverId) {
        return request.auth != null && request.auth.uid == driverId;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.driverId == request.auth.uid;
      allow update: if isOwner(resource.data.driverId) && resource != null;
      allow delete: if isOwner(resource.data.driverId) && resource != null;
    }

    /**
     * @description Secures booking information for a specific ride.  Only the passenger can access their own bookings.
     * @path /rides/{rideId}/bookings/{bookingId}
     * @allow (create) - User with UID 'user_abc' can create a booking if request.auth.uid == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete their booking.
     * @deny (create, get, update, delete) - Any other user cannot access this data.
     * @principle Enforces document ownership for all operations.
     */
    match /rides/{rideId}/bookings/{bookingId} {
      function isOwner(passengerId) {
        return request.auth != null && request.auth.uid == passengerId;
      }

      allow create: if isOwner(request.resource.data.passengerId);
      allow get: if isOwner(resource.data.passengerId);
      allow list: if false;
      allow update: if isOwner(resource.data.passengerId) && resource != null;
      allow delete: if isOwner(resource.data.passengerId) && resource != null;
    }

    /**
     * @description Secures reviews for a specific ride. Only the reviewer can access their own reviews.
     * @path /rides/{rideId}/reviews/{reviewId}
     * @allow (create) - User with UID 'user_abc' can create a review if request.auth.uid == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete their review.
     * @deny (create, get, update, delete) - Any other user cannot access this data.
     * @principle Enforces document ownership for all operations.
     */
    match /rides/{rideId}/reviews/{reviewId} {
      function isOwner(reviewerId) {
        return request.auth != null && request.auth.uid == reviewerId;
      }

      allow create: if isOwner(request.resource.data.reviewerId);
      allow get: if isOwner(resource.data.reviewerId);
      allow list: if false;
      allow update: if isOwner(resource.data.reviewerId) && resource != null;
      allow delete: if isOwner(resource.data.reviewerId) && resource != null;
    }

    /**
     * @description Secures vehicle information for a specific user. Only the user can access their vehicle information.
     * @path /users/{userId}/vehicles/{vehicleId}
     * @allow (create) - User with UID 'user_abc' can create a vehicle if request.auth.uid == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete their vehicle.
     * @deny (create, get, update, delete) - Any other user cannot access this data.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/vehicles/{vehicleId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow create: if isOwner(userId) && request.resource.data.driverId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isOwner(userId) && resource.data.driverId == userId && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}