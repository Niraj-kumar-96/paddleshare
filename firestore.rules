/**
 * @fileoverview Firestore Security Rules for PaddleShare.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-ownership and public-read with owner-write patterns.
 * Users can only manage their own data, while rides are publicly visible but can only be created,
 * updated, or deleted by the ride's owner (driver).  Messages within bookings are restricted to
 * the involved passenger and driver.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Access is restricted to the user themselves.
 * - /rides/{rideId}: Stores ride information. Publicly readable, but creates/updates/deletes are driver-only.
 * - /bookings/{bookingId}: Stores booking information, created by the passenger.
 * - /bookings/{bookingId}/messages/{messageId}: Stores chat messages related to the booking, restricted to the driver and passenger.
 * - /reviews/{reviewId}: Stores reviews for rides.
 * - /vehicles/{vehicleId}: Stores vehicle information, only accessible by the vehicle owner.
 *
 * Key Security Decisions:
 * - Users can only access their own user document. Listing all users is disallowed.
 * - Rides are publicly readable to facilitate discovery, but only the driver can modify them.
 * - Bookings can be created by the passenger. Messages are only readable/writable by the passenger and driver.
 *
 * Denormalization for Authorization:
 * - Rides: Each ride document denormalizes the `driverId` to enable easy owner-only write rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, ensuring users can only access their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile document with ID 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete their own profile document with ID 'user_abc'.
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot access the profile document of user 'user_abc'.
     * @deny (list) - Listing all users is not permitted.
     * @principle Enforces strict user-ownership for profile data.
     */
    match /users/{userId} {
      // Only allow creating a user document if the UID matches the document ID.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get, update, delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow list: if false;
    }

    /**
     * @description Manages ride data. Rides are publicly readable, but only the driver can modify them.
     * @path /databases/{database}/documents/rides/{rideId}
     * @allow (get, list) - Any user can read or list ride documents.
     * @allow (create) - User with UID 'user_abc' can create a ride document where 'driverId' is 'user_abc'.
     * @allow (update, delete) - User with UID 'user_abc' can update or delete a ride document where 'driverId' is 'user_abc' and the document exists.
     * @deny (create, update, delete) - User with UID 'user_xyz' cannot modify a ride document where 'driverId' is 'user_abc'.
     * @principle Allows public read access while enforcing driver-only write access.
     */
    match /rides/{rideId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.driverId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.driverId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.driverId);
    }

    /**
     * @description Manages booking data. Authenticated users can create and read their own bookings.
     * @path /databases/{database}/documents/bookings/{bookingId}
     * @allow (create) - Authenticated user can create a booking with their user ID.
     * @allow (get, list) - Authenticated user can read a booking where their user ID matches the 'passengerId' or they are the driver.
     * @allow (update, delete) - Not allowed.
     * @deny (create, get, list) - Unauthenticated user can not create or read bookings.
     * @principle Enforces that only the passenger can create a booking, and both the passenger and driver have read access.
     */
    match /bookings/{bookingId} {
      allow create: if isSignedIn() && request.resource.data.passengerId == request.auth.uid;
      allow get, list: if isSignedIn() && (resource.data.passengerId == request.auth.uid);
      allow update, delete: if false;

      /**
       * @description Manages chat messages within a booking. Only the passenger and driver can read/write.
       * @path /databases/{database}/documents/bookings/{bookingId}/messages/{messageId}
       * @allow (create) - Authenticated user can create a message if they are the driver or passenger in the parent booking.
       * @allow (get, list) - Authenticated user can read messages if they are the driver or passenger in the parent booking.
       * @allow (update, delete) - Not allowed.
       * @deny (create, get, list) - Unauthenticated user can not create or read messages. Users who are not driver or passenger can not create or read messages.
       * @principle Enforces that only the passenger and driver can exchange messages within a booking.
       */
      match /messages/{messageId} {
        allow create: if isSignedIn() && (get(/databases/$(database)/documents/bookings/$(bookingId)).data.passengerId == request.auth.uid || get(/databases/$(database)/documents/bookings/$(bookingId)).data.driverId == request.auth.uid);
        allow get, list: if isSignedIn() && (get(/databases/$(database)/documents/bookings/$(bookingId)).data.passengerId == request.auth.uid || get(/databases/$(database)/documents/bookings/$(bookingId)).data.driverId == request.auth.uid);
        allow update, delete: if false;
      }
    }

    /**
     * @description Manages reviews data.
     * @path /databases/{database}/documents/reviews/{reviewId}
     */
    match /reviews/{reviewId} {
        allow get, list, create, update, delete: if false; // TODO: Define more specific access control for reviews.
    }

    /**
     * @description Manages vehicle data.
     * @path /databases/{database}/documents/vehicles/{vehicleId}
     */
    match /vehicles/{vehicleId} {
      allow create: if isSignedIn() && request.resource.data.driverId == request.auth.uid;
      allow get, update, delete: if isSignedIn() && isExistingOwner(resource.data.driverId);
      allow list: if isSignedIn() && resource.data.driverId == request.auth.uid;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(ownerId) {
        return isSignedIn() && isOwner(ownerId) && resource != null;
    }
  }
}