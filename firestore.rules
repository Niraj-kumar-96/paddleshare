/**
 * @fileoverview Firestore Security Rules for PaddleShare.
 *
 * Core Philosophy:
 * This ruleset prioritizes a user-centric security model with public read access for some collections.
 * User documents are secured using ownership checks. Rides are publicly readable, but creating, updating, and deleting is restricted to authenticated users who own the ride.
 * Bookings are linked to both rides and users, with a nested messages subcollection that only participants can access.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only to the user themselves.
 * - /rides/{rideId}: Ride information, publicly readable, writable by the owner.
 * - /bookings/{bookingId}: Booking information, writable by the user who created the booking.
 * - /bookings/{bookingId}/messages/{messageId}: Chat messages for bookings, accessible only to the participants.
 * - /reviews/{reviewId}: Reviews for rides.
 * - /vehicles/{vehicleId}: Vehicle information, only accessible to the owner.
 *
 * Key Security Decisions:
 * - Users can only access their own user document.
 * - Rides are publicly readable but only creatable, updatable, and deletable by their owner.
 * - Only authenticated users can create Bookings.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `Ride` entity contains a `driverId` field. This simplifies ownership checks for ride modification.
 *
 * Structural Segregation:
 * - There is no segregation of private/public data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data, ensuring only the user can access their own document.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with ID 'user_abc' can create their own document.
     *   - auth.uid: 'user_abc'
     *   - request.resource.data.id: 'user_abc'
     * @allow (get, update, delete) User with ID 'user_abc' can get, update, and delete their own document.
     *   - auth.uid: 'user_abc'
     * @deny (create) User with ID 'user_abc' cannot create a document with a different ID ('user_xyz').
     *   - auth.uid: 'user_abc'
     *   - request.resource.data.id: 'user_xyz'
     * @deny (get, update, delete) User with ID 'user_abc' cannot get, update, or delete another user's document ('user_xyz').
     *   - auth.uid: 'user_abc'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures ride information, allowing public read access but restricting write access to the owner.
     * @path /databases/{database}/documents/rides/{rideId}
     * @allow (get, list) Any user can read ride information.
     * @allow (create) User with ID 'user_abc' can create a ride with themselves as the driver.
     *   - auth.uid: 'user_abc'
     *   - request.resource.data.driverId: 'user_abc'
     * @allow (update, delete) User with ID 'user_abc' can update/delete their own ride.
     *   - auth.uid: 'user_abc'
     *   - resource.data.driverId: 'user_abc'
     * @deny (create) Anonymous user cannot create a ride.
     *   - auth.uid: null
     * @deny (create) User with ID 'user_abc' cannot create a ride with a different driver ID ('user_xyz').
     *   - auth.uid: 'user_abc'
     *   - request.resource.data.driverId: 'user_xyz'
     * @deny (update, delete) User with ID 'user_abc' cannot update/delete another user's ride.
     *   - auth.uid: 'user_abc'
     *   - resource.data.driverId: 'user_xyz'
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /rides/{rideId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.driverId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.driverId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.driverId);
    }

    /**
     * @description Secures booking information, allowing only authenticated users to create bookings.
     * @path /databases/{database}/documents/bookings/{bookingId}
     * @allow (create) User with ID 'user_abc' can create a booking.
     *   - auth.uid: 'user_abc'
     * @allow (get, list) User with ID 'user_abc' can read all bookings.
     *   - auth.uid: 'user_abc'
     * @deny (create) Anonymous user cannot create a booking.
     *   - auth.uid: null
     * @principle Allows authenticated users to create bookings.
     */
    match /bookings/{bookingId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;

          /**
           * @description Secures chat messages for a booking, allowing only the passenger and driver to read/write.
           * @path /databases/{database}/documents/bookings/{bookingId}/messages/{messageId}
           * @allow (create) User with ID 'user_abc' can create a message if they are the passenger or driver.
           *   - auth.uid: 'user_abc'
           * @allow (get, list) User with ID 'user_abc' can read messages if they are the passenger or driver.
           *   - auth.uid: 'user_abc'
           * @deny (create) User with ID 'user_abc' cannot create a message if they are not the passenger or driver.
           *   - auth.uid: 'user_abc'
           * @principle Restricts access to chat messages to booking participants.
           */
          match /messages/{messageId} {
            allow get: if false;
            allow list: if false;
            allow create: if false;
            allow update: if false;
            allow delete: if false;
          }
    }

    /**
     * @description Secures reviews for rides.
     * @path /databases/{database}/documents/reviews/{reviewId}
     * @allow (get, list) Any user can read all reviews.
     * @principle Allows any user to read reviews.
     */
    match /reviews/{reviewId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures vehicle information, allowing only the owner to access their vehicles.
     * @path /databases/{database}/documents/vehicles/{vehicleId}
     * @allow (create) User with ID 'user_abc' can create a vehicle with themselves as the driver.
     *   - auth.uid: 'user_abc'
     *   - request.resource.data.driverId: 'user_abc'
     * @deny (create) User with ID 'user_abc' cannot create a vehicle with a different driver ID ('user_xyz').
     *   - auth.uid: 'user_abc'
     *   - request.resource.data.driverId: 'user_xyz'
     * @principle Enforces document ownership for all operations.
     */
    match /vehicles/{vehicleId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.driverId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return request.auth.uid == userId && resource != null;
  }
}