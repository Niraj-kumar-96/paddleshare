
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to improve readability
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isBookingPassenger(bookingId) {
        return get(/databases/$(database)/documents/bookings/$(bookingId)).data.passengerId == request.auth.uid;
    }
    
    function isRideDriver(rideId) {
        return get(/databases/$(database)/documents/rides/$(rideId)).data.driverId == request.auth.uid;
    }

    // Users can only read/write their own profile
    match /users/{userId} {
      allow read: if true;
      allow create: if isUser(userId);
      allow update: if isUser(userId);
      allow delete: if false; // Users should not be able to delete their accounts directly
    }

    // Vehicles can only be managed by their owner
    match /vehicles/{vehicleId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isUser(resource.data.driverId);
    }
    
    // Rides can be read by anyone, but only created/managed by the driver
    match /rides/{rideId} {
      allow read: if true;
      allow create: if isUser(request.resource.data.driverId);
      allow update: if isUser(get(path(rideId)).data.driverId)
                    && request.resource.data.driverId == get(path(rideId)).data.driverId; // Driver ID cannot be changed
      // A ride can only be deleted if it has no bookings.
      // This is enforced in the UI, but we add a backend rule for safety.
      allow delete: if isUser(get(path(rideId)).data.driverId)
                    && !exists(/databases/$(database)/documents/bookings/{bookingId_wildcard}) where get(/databases/$(database)/documents/bookings/{bookingId_wildcard}).data.rideId == rideId;

    }

    // Bookings have more complex rules
    match /bookings/{bookingId} {
      allow read: if isUser(resource.data.passengerId) || isRideDriver(resource.data.rideId);
      allow create: if isUser(request.resource.data.passengerId)
                    // Ensure the booking is for the user creating it
                    && request.resource.data.passengerId == request.auth.uid
                    // Status must be pending on creation
                    && request.resource.data.status == 'pending';
      allow update: if 
        // A passenger can cancel their own booking
        (isUser(resource.data.passengerId) && request.resource.data.status == 'cancelled') ||
        // A driver can confirm or decline a pending booking
        (isRideDriver(resource.data.rideId) && (request.resource.data.status == 'confirmed' || request.resource.data.status == 'declined')) ||
        // A passenger can update payment status after a booking is confirmed
        (isUser(resource.data.passengerId) && resource.data.status == 'confirmed' && request.resource.data.paymentStatus == 'paid');
      allow delete: if false; // Bookings should be cancelled, not deleted
      
       // Messages can only be read/written by the passenger or driver
       match /messages/{messageId} {
         allow read, write: if isBookingPassenger(bookingId) || isRideDriver(get(/databases/$(database)/documents/bookings/$(bookingId)).data.rideId);
       }
    }

    // Reviews can be written by a passenger of a ride, and read by anyone
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isUser(request.resource.data.reviewerId);
      allow update, delete: if isUser(get(path(reviewId)).data.reviewerId);
    }
  }
}
