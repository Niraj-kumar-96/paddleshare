rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data. Only the authenticated user can read/write their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (read, write) if request.auth.uid == userId
     * @deny (read, write) if request.auth.uid != userId
     * @principle Enforces strict user-ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages ride data. Anyone can read rides, but only authenticated users can create, update, or delete them.
     * @path /databases/{database}/documents/rides/{rideId}
     * @allow (read) Public read access for all users.
     * @allow (create, update, delete) Only the ride's driver can modify it.
     * @deny (create, update, delete) if not authenticated or not the driver.
     * @principle Public read, owner-only writes with driverId ownership validation.
     */
    match /rides/{rideId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.driverId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.driverId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.driverId);
    }

    /**
     * @description Manages booking data. Authenticated users can create/read their own bookings.
     * @path /databases/{database}/documents/bookings/{bookingId}
     * @allow (create, read) Only the booking's passenger can create/read it.
     * @deny (create, read) if not authenticated or not the passenger.
     * @principle Enforces user-ownership for bookings.
     */
    match /bookings/{bookingId} {
      allow get: if isSignedIn() && isOwner(resource.data.passengerId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.passengerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.passengerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.passengerId);

          /**
           * @description Manages chat messages for a specific booking. Only the passenger and driver can read/write.
           * @path /databases/{database}/documents/bookings/{bookingId}/messages/{messageId}
           * @allow (read, write) Only the passenger and driver can access messages.
           * @deny (read, write) if not the passenger or driver.
           * @principle Restricts message access to participants of the booking.
           */
        match /messages/{messageId} {
          allow get: if isSignedIn() && isBookingParticipant(bookingId);
          allow list: if isSignedIn() && isBookingParticipant(bookingId);
          allow create: if isSignedIn() && isBookingParticipant(bookingId);
          allow update: if false;
          allow delete: if false;
        }
    }

    /**
     * @description Manages ride reviews.
     * @path /databases/{database}/documents/reviews/{reviewId}
     * @allow (read) Public read access for all users.
     * @allow (create) Only authenticated users can create reviews.
     * @deny (create) if not authenticated.
     * @principle Public read, authenticated-user writes.
     */
    match /reviews/{reviewId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.reviewerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.reviewerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.reviewerId);
    }

    /**
     * @description Manages vehicle data for users.
     * @path /databases/{database}/documents/vehicles/{vehicleId}
     * @allow (read, write) Only the vehicle's owner (driver) can access it.
     * @deny (read, write) if not authenticated or not the driver.
     * @principle Enforces user-ownership for vehicle data.
     */
    match /vehicles/{vehicleId} {
      allow get: if isSignedIn() && isOwner(resource.data.driverId);
      allow list: if isSignedIn() && isOwner(resource.data.driverId);
      allow create: if isSignedIn() && request.resource.data.driverId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.driverId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.driverId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return request.auth.uid == userId && resource.data.driverId != null;
    }

    function isBookingParticipant(bookingId) {
      let booking = get(/databases/$(database)/documents/bookings/$(bookingId)).data;
      return booking.passengerId == request.auth.uid
          || booking.driverId == request.auth.uid;
    }
  }
}