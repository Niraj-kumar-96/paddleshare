/**
 * @fileoverview Firestore Security Rules for PaddleShare Platform
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization based on user identity and resource ownership.
 * It defaults to restrictive access, requiring explicit rules to allow reads and writes.
 * Data validation is relaxed to facilitate rapid prototyping but includes essential authorization checks.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, secured with owner-only access.
 * - /rides/{rideId}: Stores ride information, publicly readable but writeable only by authenticated users.
 * - /bookings/{bookingId}: Stores booking information, with authenticated users able to manage their bookings.
 * - /reviews/{reviewId}: Stores ride reviews, secured with owner-only access
 * - /vehicles/{vehicleId}: Stores vehicle information, secured with owner-only access.
 *
 * Key Security Decisions:
 * - Users can only read/write their own data under /users/{userId}.
 * - Rides are publicly readable, but creation, update, and deletion are restricted to authenticated users.
 * - Bookings can be managed by authenticated users.
 * - Listing of bookings is only available to authenticated users.
 *
 * Denormalization for Authorization:
 *  - Rides documents must contain `driverId` field for authorization.
 *
 * Structural Segregation:
 * Not applicable in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read/write their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with UID 'user123' can create their profile document with id == 'user123'.
     * @allow (get, update, delete) Authenticated user with UID 'user123' can read/update/delete their own profile.
     * @deny (create) User with UID 'user456' cannot create a profile document with id 'user123'.
     * @deny (get, update, delete) Authenticated user with UID 'user456' cannot read/update/delete profile with id 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure ride information. Publicly readable, but creation and management are restricted to authenticated users.
     * @path /databases/{database}/documents/rides/{rideId}
     * @allow (get, list) Anyone can read the ride information.
     * @allow (create) Authenticated user can create a ride. Must have `driverId` set to `request.auth.uid`.
     * @allow (update, delete) Authenticated user who is the driver can update/delete the ride.
     * @deny (create) Unauthenticated user cannot create a ride.
     * @deny (update, delete) Authenticated user who is NOT the driver cannot update/delete the ride.
     * @principle Public read, owner-only writes, enforces driver ownership.
     */
    match /rides/{rideId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.driverId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.driverId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.driverId);
    }

    /**
     * @description Secure booking information. Authenticated users can create/read/update their own bookings.
     * @path /databases/{database}/documents/bookings/{bookingId}
     * @allow (create) Authenticated user can create a booking.
     * @allow (get, list) Authenticated user can list their own bookings.
     * @allow (update, delete) Authenticated user can update/delete their own bookings.
     * @deny (create) Unauthenticated user cannot create a booking.
     * @deny (get, list) Unauthenticated user cannot list bookings.
     * @deny (update, delete) Unauthenticated user cannot update/delete other user's bookings.
     * @principle Authenticated users can manage their own bookings.
     */
    match /bookings/{bookingId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.passengerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(request.auth.uid);
      allow delete: if isSignedIn() && isExistingOwner(request.auth.uid);
    }

        /**
         * @description Secure review information.
         * @path /databases/{database}/documents/reviews/{reviewId}
         * @allow (create) Authenticated user can create a review. Must have `reviewerId` set to `request.auth.uid`.
         * @allow (get) Anyone can read the review.
         * @allow (update, delete) Authenticated user who created the review can update/delete it.
         * @deny (create) Unauthenticated user cannot create a review.
         * @deny (update, delete) Authenticated user who didn't create the review cannot update/delete it.
         * @principle Public read, owner-only writes, enforces reviewer ownership.
         */
    match /reviews/{reviewId} {
          allow get: if true;
          allow list: if false;
          allow create: if isSignedIn() && request.resource.data.reviewerId == request.auth.uid;
          allow update: if isSignedIn() && isExistingOwner(request.auth.uid);
          allow delete: if isSignedIn() && isExistingOwner(request.auth.uid);
        }

       /**
         * @description Secure vehicle information. Only the authenticated user can read/write their own vehicle profiles.
         * @path /databases/{database}/documents/vehicles/{vehicleId}
         * @allow (create) User with UID 'user123' can create their vehicle document with driverId == 'user123'.
         * @allow (get, update, delete) Authenticated user with UID 'user123' can read/update/delete their own vehicle.
         * @deny (create) User with UID 'user456' cannot create a vehicle document with driverId 'user123'.
         * @deny (get, update, delete) Authenticated user with UID 'user456' cannot read/update/delete vehicle with driverId 'user123'.
         * @principle Enforces document ownership for all operations.
         */
    match /vehicles/{vehicleId} {
          allow get: if isSignedIn() && isOwner(resource.data.driverId);
          allow list: if false;
          allow create: if isSignedIn() && request.resource.data.driverId == request.auth.uid;
          allow update: if isSignedIn() && isExistingOwner(request.auth.uid);
          allow delete: if isSignedIn() && isExistingOwner(request.auth.uid);
        }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}